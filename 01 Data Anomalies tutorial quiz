<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Anomalies Quiz</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .quiz-container {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .question {
            margin-bottom: 20px;
        }
        .options {
            margin-left: 20px;
        }
        button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #45a049;
        }
        #result {
            text-align: center;
            font-weight: bold;
            margin-top: 20px;
        }
        .feedback {
            display: none;
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
        }
        .correct {
            background-color: #d4edda;
            color: #155724;
        }
        .incorrect {
            background-color: #f8d7da;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="quiz-container">
        <h1>Data Anomalies Quiz</h1>
        <form id="quiz-form">
            <div class="question">
                <p>1. What are the three main types of data anomalies discussed in the tutorial?</p>
                <div class="options">
                    <input type="radio" name="q1" value="a"> a) Insert, Update, Delete<br>
                    <input type="radio" name="q1" value="b"> b) Create, Read, Update<br>
                    <input type="radio" name="q1" value="c"> c) Add, Modify, Remove<br>
                    <input type="radio" name="q1" value="d"> d) Input, Process, Output
                </div>
                <div class="feedback" id="feedback1"></div>
            </div>

            <div class="question">
                <p>2. In the TechEd University scenario, what is the primary issue preventing the addition of a new course without student enrollment?</p>
                <div class="options">
                    <input type="radio" name="q2" value="a"> a) Lack of professor information<br>
                    <input type="radio" name="q2" value="b"> b) Insert anomaly<br>
                    <input type="radio" name="q2" value="c"> c) Update anomaly<br>
                    <input type="radio" name="q2" value="d"> d) Delete anomaly
                </div>
                <div class="feedback" id="feedback2"></div>
            </div>

            <div class="question">
                <p>3. How does database normalization help solve the insert anomaly in the TechEd University case?</p>
                <div class="options">
                    <input type="radio" name="q3" value="a"> a) By creating a single, larger table<br>
                    <input type="radio" name="q3" value="b"> b) By separating data into multiple, related tables<br>
                    <input type="radio" name="q3" value="c"> c) By adding more fields to the existing table<br>
                    <input type="radio" name="q3" value="d"> d) By removing all student information
                </div>
                <div class="feedback" id="feedback3"></div>
            </div>

            <div class="question">
                <p>4. In the MediCare Hospital scenario, what specific information change leads to an update anomaly?</p>
                <div class="options">
                    <input type="radio" name="q4" value="a"> a) Patient name change<br>
                    <input type="radio" name="q4" value="b"> b) Doctor's specialty change<br>
                    <input type="radio" name="q4" value="c"> c) Doctor's contact number change<br>
                    <input type="radio" name="q4" value="d"> d) Ward assignment change
                </div>
                <div class="feedback" id="feedback4"></div>
            </div>

            <div class="question">
                <p>5. What are the potential consequences of the update anomaly in the MediCare Hospital case?</p>
                <div class="options">
                    <input type="radio" name="q5" value="a"> a) Data inconsistency<br>
                    <input type="radio" name="q5" value="b"> b) Increased workload<br>
                    <input type="radio" name="q5" value="c"> c) Data integrity issues<br>
                    <input type="radio" name="q5" value="d"> d) All of the above
                </div>
                <div class="feedback" id="feedback5"></div>
            </div>

            <div class="question">
                <p>6. How does the proposed solution for MediCare Hospital address the update anomaly?</p>
                <div class="options">
                    <input type="radio" name="q6" value="a"> a) By creating a backup of the database<br>
                    <input type="radio" name="q6" value="b"> b) By storing doctor's information in a separate table<br>
                    <input type="radio" name="q6" value="c"> c) By removing all doctor contact information<br>
                    <input type="radio" name="q6" value="d"> d) By creating multiple copies of doctor information
                </div>
                <div class="feedback" id="feedback6"></div>
            </div>

            <div class="question">
                <p>7. In the GadgetWorld scenario, what action triggers a delete anomaly?</p>
                <div class="options">
                    <input type="radio" name="q7" value="a"> a) Adding a new product<br>
                    <input type="radio" name="q7" value="b"> b) Updating customer information<br>
                    <input type="radio" name="q7" value="c"> c) Deleting orders of a discontinued product<br>
                    <input type="radio" name="q7" value="d"> d) Changing product prices
                </div>
                <div class="feedback" id="feedback7"></div>
            </div>

            <div class="question">
                <p>8. What is a significant consequence of the delete anomaly in the GadgetWorld case?</p>
                <div class="options">
                    <input type="radio" name="q8" value="a"> a) Loss of customer data<br>
                    <input type="radio" name="q8" value="b"> b) Inability to process new orders<br>
                    <input type="radio" name="q8" value="c"> c) Loss of historical product data<br>
                    <input type="radio" name="q8" value="d"> d) Increase in product prices
                </div>
                <div class="feedback" id="feedback8"></div>
            </div>

            <div class="question">
                <p>9. How does the normalization solution for GadgetWorld prevent the loss of product information when deleting orders?</p>
                <div class="options">
                    <input type="radio" name="q9" value="a"> a) By creating backups of all orders<br>
                    <input type="radio" name="q9" value="b"> b) By never allowing order deletion<br>
                    <input type="radio" name="q9" value="c"> c) By storing product information in a separate table<br>
                    <input type="radio" name="q9" value="d"> d) By duplicating product information across multiple tables
                </div>
                <div class="feedback" id="feedback9"></div>
            </div>

            <div class="question">
                <p>10. What does a null field represent in a database?</p>
                <div class="options">
                    <input type="radio" name="q10" value="a"> a) A field with a zero value<br>
                    <input type="radio" name="q10" value="b"> b) A field with an empty string<br>
                    <input type="radio" name="q10" value="c"> c) A missing or unknown value<br>
                    <input type="radio" name="q10" value="d"> d) A field with a default value
                </div>
                <div class="feedback" id="feedback10"></div>
            </div>

            <div class="question">
                <p>11. Which of the following is NOT mentioned as a problem with null fields?</p>
                <div class="options">
                    <input type="radio" name="q11" value="a"> a) Ambiguity<br>
                    <input type="radio" name="q11" value="b"> b) Data integrity issues<br>
                    <input type="radio" name="q11" value="c"> c) Query complications<br>
                    <input type="radio" name="q11" value="d"> d) Improved database performance
                </div>
                <div class="feedback" id="feedback11"></div>
            </div>

            <div class="question">
                <p>12. How can null fields compound the negative effects of an insert anomaly?</p>
                <div class="options">
                    <input type="radio" name="q12" value="a"> a) By allowing insertion of incomplete data<br>
                    <input type="radio" name="q12" value="b"> b) By preventing any data insertion<br>
                    <input type="radio" name="q12" value="c"> c) By automatically filling in missing data<br>
                    <input type="radio" name="q12" value="d"> d) By duplicating existing data
                </div>
                <div class="feedback" id="feedback12"></div>
            </div>

            <div class="question">
                <p>13. In what way do null fields add complexity to update operations?</p>
                <div class="options">
                    <input type="radio" name="q13" value="a"> a) They require additional checks before updating<br>
                    <input type="radio" name="q13" value="b"> b) They always prevent updates from occurring<br>
                    <input type="radio" name="q13" value="c"> c) They automatically update all related fields<br>
                    <input type="radio" name="q13" value="d"> d) They require updates to be performed twice
                </div>
                <div class="feedback" id="feedback13"></div>
            </div>

            <div class="question">
                <p>14. How can default values help in addressing issues with null fields?</p>
                <div class="options">
                    <input type="radio" name="q14" value="a"> a) By increasing database size<br>
                    <input type="radio" name="q14" value="b"> b) By preventing data entry<br>
                    <input type="radio" name="q14" value="c"> c) By providing a known value instead of null<br>
                    <input type="radio" name="q14" value="d"> d) By allowing multiple null representations
                </div>
                <div class="feedback" id="feedback14"></div>
            </div>

            <div class="question">
                <p>15. What is the purpose of using NOT NULL constraints in database design?</p>
                <div class="options">
                    <input type="radio" name="q15" value="a"> a) To allow nulls in all fields<br>
                    <input type="radio" name="q15" value="b"> b) To enforce data integrity by preventing null values<br>
                    <input type="radio" name="q15" value="c"> c) To automatically fill in null values<br>
                    <input type="radio" name="q15" value="d"> d) To create more storage space in the database
                </div>
                <div class="feedback" id="feedback15"></div>
            </div>

            <button type="button" onclick="submitQuiz()">Submit Quiz</button>
        </form>
        <div id="result"></div>
    </div>

    <script>
        function submitQuiz() {
            const answers = ['a', 'b', 'b', 'c', 'd', 'b', 'c', 'c', 'c', 'c', 'd', 'a', 'a', 'c', 'b'];
            const feedback = [
                "The three main types of data anomalies are Insert, Update, and Delete.",
                "The insert anomaly prevents adding a new course without student enrollment.",
                "Normalization separates data into multiple, related tables, solving the insert anomaly.",
                "The doctor's contact number change leads to an update anomaly in this scenario.",
                "All of these are potential consequences of the update anomaly in the MediCare Hospital case.",
                "Storing doctor's information in a separate table addresses the update anomaly.",
                "Deleting orders of a discontinued product triggers a delete anomaly in this scenario.",
                "The delete anomaly results in the loss of historical product data when deleting orders.",
                "Storing product information in a separate table prevents loss of data when deleting orders.",
                "A null field represents a missing or unknown value in a database.",
                "Improved database performance is not mentioned as a problem with null fields.",
                "Null fields can allow the insertion of incomplete data, compounding insert anomaly effects.",
                "Null fields require additional checks before updating, adding complexity to update operations.",
                "Default values provide a known value instead of null, helping address issues with null fields.",
                "NOT NULL constraints enforce data integrity by preventing null values in database design."
            ];
            let score = 0;
            for (let i = 1; i <= 15; i++) {
                const selected = document.querySelector(`input[name="q${i}"]:checked`);
                const feedbackElement = document.getElementById(`feedback${i}`);
                if (selected) {
                    if (selected.value === answers[i-1]) {
                        score++;
                        feedbackElement.innerHTML = `Correct! ${feedback[i-1]}`;
                        feedbackElement.className = 'feedback correct';
                    } else {
                        feedbackElement.innerHTML = `Incorrect. ${feedback[i-1]}`;
                        feedbackElement.className = 'feedback incorrect';
                    }
                } else {
                    feedbackElement.innerHTML = `You didn't select an answer. ${feedback[i-1]}`;
                    feedbackElement.className = 'feedback incorrect';
                }
                feedbackElement.style.display = 'block';
            }
            document.getElementById('result').innerHTML = `You scored ${score} out of 15 questions correctly.`;
        }
    </script>
</body>
</html>
